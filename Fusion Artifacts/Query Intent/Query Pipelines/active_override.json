{
  "id": "active_override",
  "stages": [
    {
      
      "script": "function (request, response, ctx) {\n  var start = new Date();\n  ctx.put(\"startTime\", start)\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": true,
      "label": "[TEST] Initial time intent",
      "condition": ""
    },
    {
      
      "serviceId": "ml-model-service",
      "modelId": "cat-query-intent-model",
      "failOnError": true,
      "inputScript": "var modelInput = new java.util.HashMap();\nmodelInput.put(\"query\", request.getFirstParam(\"q\"));\ncontext.put(\"userQuery\" , request.getFirstParam(\"q\"));\nmodelInput\n\n/*\n\nThis script must contruct a HashMap containing fields and values to be sent to the ML model service.\nThe field names and values will depend on the input schema of the model.\nGenerally, you'll be reading fields and values from the request/context/response and placing them into a HashMap.\n\nValue types supported are:\n- String\n- Double\n- String[]\n- double[]\n- List<String>\n- List<Number>\n\nThis script receives these objects and can be referenced in your script:\n- request\n- response\n- context\n- log (Logger useful for debugging)\n\nThe last line of the script must be a reference to the HashMap object you created.\n\nExample 1: Single string parameter from request to modelInput HashMap\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"input_1\", request.getFirstParam(\"q\"))\nmodelInput\n\nExample 2: List of strings from request to modelInput HashMap\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"input_1\", request.getParam(\"q\")) // request.getParam returns a Collection\nmodelInput\n\nExample 3: List of numeric values from request to modelInput HashMap\nvar modelInput = new java.util.HashMap()\nvar list = new java.util.ArrayList()\nlist.add(Double.parseDouble(request.getFirstParam(\"numeric_1\")))\nlist.add(Double.parseDouble(request.getFirstParam(\"numeric_2\")))\nmodelInput.put(\"input_1\", list)\nmodelInput\n\nExample 4: To use the spark ml based models, use the below code\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"concatField\", request.getFirstParam(\"q\"))\nmodelInput\n\n*/\n",
      "outputScript": "var modelOutputDict = JSON.parse(modelOutput[\"_rawJsonResponse\"]);\nvar predictedLabel = modelOutputDict[\"ndarray\"][0][\"label\"];\nvar predictedScore = modelOutputDict[\"ndarray\"][0][\"score\"];\n\nvar tagDictionary = {\n  \"LABEL_0\": \"merchandise\",\n  \"LABEL_1\": \"careers\",\n  \"LABEL_2\": \"manuals/training\",\n  \"LABEL_3\": \"technology\",\n  \"LABEL_4\": \"account/finance\",\n  \"LABEL_5\": \"warranty\",\n  \"LABEL_6\": \"SIS/SOS/fluid-oil analysis\",\n  \"LABEL_7\": \"inappropriate\",\n  \"LABEL_8\": \"product model number\",\n  \"LABEL_9\": \"product name\",\n  \"LABEL_10\": \"parts\",\n  \"LABEL_11\": \"junk\",\n};\n\nvar displayLabel = mapLabel(predictedLabel, predictedScore);\ncontext.put(\"predictedIntentLabel\", tagDictionary[predictedLabel]);\ncontext.put(\"displayLabel\", displayLabel);\ncontext.put(\"predictedIntentScore\", predictedScore);\nrequest.putSingleParam(\"query_intent\", displayLabel);\n\nfunction mapLabel(originalLabel, score) {\n  var score = parseFloat(score);\n\n  if (score < 0.50) {\n    return \"miscellaneous\";\n  }\n\n  var mappedLabel = tagDictionary[originalLabel];\n\n  if (mappedLabel) {\n    return mappedLabel;\n  }\n\n  return \"invalid_tag\";\n}\n\n/*\n\nThis output script receives the output prediction from the ML model service as a HashMap called \"modelOutput\".\nMost of the time this is used to place prediction results in the request or context for downstream pipeline stages\nto consume.\n\nThis script receives these objects and can be referenced in your script:\n- modelOutput (a HashMap containing fields/values returned from ML model service)\n- request\n- response\n- context\n- log (Logger useful for debugging)\n\nExample: Place predictedLabel (string) on request\nrequest.putSingleParam(\"sentiment\", modelOutput.get(\"predictedLabel\"))\n\n*/\n",
      "type": "ml-query",
      "skip": false,
      "label": "[Phase 3] Get query intent",
      "condition": "[\"language:en_us\",\"language:en_gb\",\"language:en_za\",\"language:en_mx\",\"language:en_au\",\"language:en_id\",\"language:en_in\"].indexOf(request.getParam(\"fq\").stream().filter(function(el){ return el.toLowerCase().indexOf(\"language:\") !== -1}).findFirst().orElse(\"no_language\").toLowerCase()) !== -1 && \r\nrequest.hasParam(\"q\") && \r\nrequest.getFirstFieldValue(\"q\").replace(/\\s/g, '').replace('*:*', '') !== ''"
    },
    {
      
      "script": "function (request, response, ctx) {\n  var end = new Date() - ctx.get(\"startTime\");\n  logger.info(\"MLMSF 1: \" + end)\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": true,
      "label": "[TEST] End time intent"
    },
    {
      
      "script": "function (request) {\n\n    var String = java.lang.String;\n    var URLEncoder = java.net.URLEncoder;\n    var StandardCharsets = java.nio.charset.StandardCharsets;\n    \n    if(request.hasParam(\"fq\")) {\n        var allParams = request.getParam(\"fq\");\n        var iter = allParams.iterator();\n        request.removeParam(\"fq\");\n\n        while (iter.hasNext()) {\n            var value = new java.lang.String(iter.next());\n            var v1 = false;\n            // if (value.contains(\">\")) {\n            //     v1 = value.replaceAll(\">\", \"*\");\n            //     value = v1;\n            // }\n\n            \n\n            // if (value.contains(\"<\")) {\n            //     v1 = value.replaceAll(\"<\", \"*\");\n            //     value = v1;\n            // }\n\n            var encodedfq = URLEncoder.encode(value,StandardCharsets.UTF_8);\n            logger.warn(\"FQ value.....\"+ encodedfq);\n            request.addParam(\"fq\", encodedfq);\n\n        }\n    }\n\n    if(request.hasParam(\"q\")) {\n        var q = new java.lang.String(request.getFirstParam(\"q\"));\n        logger.warn(\"Q value.....\"+ q);\n\n        if (q.contains(\"|\") || q.contains(\"%7C\") ) {\n            while(q.indexOf(\"|\") >= 0) {\n                q = q.replace(\"|\", \"%7C\"); // \"so-me|str|ing\" → RIGHT\n                }\n                //v1 = q.replace(\"|\", \"%7C\");\n                //v1 = q.replaceAll(\"%7C\", \" \");\n                logger.warn(\"v1 value.....\"+ q);\n                //q = v1;\n                logger.warn(\"Q replace value.....\"+ q);\n        }\n\n        if (q.contains(\">\")) {\n            v1 = q.replaceAll(\">\", \"*\");\n            q = v1;\n        }\n\n        if (q.contains(\"<\")) {\n            v1 = q.replaceAll(\"<\", \"*\");\n            q = v1;\n        }\n\n\n        //[ACN Phase 2] Bug fix: commented due to provoke double enconding\n        // if (q.contains(\" \")) {\n        //     var nq = q.replaceAll(\" \", \"%20\");\n        //     q = nq;\n            //if(!q.contains(\"\\\"\")) {\n            //    q = \"%22\" + nq + \"%22\";\n            //}\n        // }\n\n        var encodedq = URLEncoder.encode(q,StandardCharsets.UTF_8);\n        request.removeParam(\"q\");\n        logger.debug(\"encoded q....\"+ encodedq);\n        request.putSingleParam(\"q\", encodedq);\n\n    }\n\n\n\n    return request;\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": false,
      "label": "replace special chars "
    },
    {
      
      "params": [
        {
          "key": "f.product_line_facet_ss.facet.prefix",
          "value": "1^",
          "policy": "default"
        }
      ],
      "type": "set-params",
      "skip": false,
      "label": "Add default product prefix filter [Phase 2]",
      "condition": "request.hasParam(\"f.product_line_facet_ss.facet.prefix\") === false\r\n"
    },
    {
      
      "script": "function (request){\n    if (request.getParams() !== null) {\n        var prefixParam = request.getFirstParam(\"f.product_line_facet_ss.facet.prefix\")\n        request.removeParam(\"f.product_line_facet_ss.facet.prefix\");\n        if (prefixParam !== undefined) {\n            var prefixModified = encodeURIComponent(prefixParam);\n            request.addParam(\"f.product_line_facet_ss.facet.prefix\", prefixModified);\n        }\n    }\n    \n    return request\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": false,
      "label": "Replace special chars [Phase 2]"
    },
    {
      
      "ref": "replace_special_chars.js",
      "shareState": true,
      "type": "managed-js-query",
      "skip": true,
      "label": "replace_special_chars"
    },
    {
      
      "pipelineToRun": "CAT-Lang-Fields",
      "type": "run-query-pipeline",
      "skip": true,
      "label": "Call Pipeline [Load Test]"
    },
    {
      
      "script": "function doHttpQuery(request) {\n    var BufferedReader = java.io.BufferedReader;\n    var InputStreamReader = java.io.InputStreamReader;\n    var HttpGet = org.apache.http.client.methods.HttpGet;\n    var IOUtils = org.apache.commons.io.IOUtils;\n    var Document = org.dom4j.Document;\n    var Element = org.dom4j.Element;\n    var List =  java.util.List;\n    var Iterator = java.util.Iterator;\n    var HashMap = java.util.HashMap;\n    var e = java.lang.Exception;\n    var URL = java.net.URL;\n    //var HttpURLConnection = java.net.HttpURLConnection;\n    var StandardCharsets = java.nio.charset.StandardCharsets;\n    var String = java.lang.String;\n    var Base64 = java.util.Base64;\n    var xmldoc = org.dom4j.Document;\n    var DocumentHelper = org.dom4j.DocumentHelper;\n    var root = org.dom4j.Element;\n    var ele = org.dom4j.Element;\n  \n\n    var base64 = java.util.Base64;\n    var encoder = base64.getEncoder();\n    var pwd = \"Sai@LW01\";\n    var user = \"saijana.selvakumar@cat.com\";\n    var auth = user + \":\" + pwd;\n    var encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));\n    var queryString = buildQueryString(request);\n    //queryString = \"?q=*:*&wt=xml&language:en_US\";\n\n    var json = {};\n    try {\n        var url = \"https://caterpillar-dev.b.lucidworks.cloud:443/api/apps/CAT/query/\" + request.getFirstFieldValue(\"profile\") + \"_override\" + queryString;\n        //var url = \"http://localhost:6764/api/apps/CAT/query/\" + request.getFirstFieldValue(\"profile\") + \"_override\" + queryString;\n        var httpurl = new URL(url);\n        var connection = httpurl.openConnection();\n        var authHeaderValue = \"Basic \" + new String(encodedAuth);\n        connection.setRequestProperty(\"Authorization\", authHeaderValue);\n\n        if (connection !== null) {\n            var rd = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n            var result = \"\";\n            var line = \"\";\n            while ((line = rd.readLine()) !== null) {\n                result += line;\n            }\n            connection.disconnect();\n        }\n    } catch (e) {\n        logger.error(\"ERROR: \" + e.toString());\n        result = e.toString();\n    }\n\n    return result;\n}\n\n\n/***********************\n  TAXONOMY BUILDINER\n***********************/\nfunction TaxonomyBuilder() {\n\n    var IOUtils = org.apache.commons.io.IOUtils;\n\n    var DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory;\n    var DocumentBuilder = javax.xml.parsers.DocumentBuilder;\n    var Document = org.w3c.dom.Document;\n    var NodeList = org.w3c.dom.NodeList;\n\n    var Element = org.w3c.dom.Element;\n    var DOMSource = javax.xml.transform.dom.DOMSource;\n    var StringWriter = java.io.StringWriter;\n    var StreamResult = javax.xml.transform.stream.StreamResult;\n    var Transformer = javax.xml.transform.Transformer;\n    var TransformerFactory = javax.xml.transform.TransformerFactory;\n\n\n    var HashMap = java.util.HashMap;\n    var StringReader = java.io.StringReader;\n    var InputSource = org.xml.sax.InputSource;\n    var String = java.lang.String;\n\n    var productsCount = null;\n    var industryCount = null;\n\n    //var map = new HashMap();\n\n    function _build(data) {\n\n        try {\n            var doc = getDocument(data);\n            logger.info(doc.getDocumentElement().getTagName());\n            var taxonomyEle = doc.createElement(\"taxonomies\");\n\n            // products tree\n            var products = doc.createElement(\"lst\");\n            taxonomyEle.appendChild(products);\n            products.setAttribute(\"name\", \"Products\");\n            //products.setAttribute(\"level\", \"0\");\n\n            var topLevelEle = doc.createElement(\"top\");\n            taxonomyEle.appendChild(topLevelEle);\n            \n\n            // industry tree\n            var industries = doc.createElement(\"lst\");\n            taxonomyEle.appendChild(industries);\n            industries.setAttribute(\"name\", \"Industry &amp; Applications\");\n            industries.setAttribute(\"level\", \"0\");\n\n\n            var facets = getFacetCounts(doc);//\n            var topLevel = getTopLevel(doc);\n            var facetFields = getFacetFields(doc);\n            var productLine = getFacet(facetFields, \"product_line_s\");\n            var productSS = getFacet(facetFields, \"product_ss\");\n\n            productsCount = elementsToHashCount(productSS);\n            // HashMap<String, Element> productMapTree = elementsToTree(productLine);\n            var pmap = buildHash(productLine);\n            buildTree(doc, products, productsCount, pmap);\n\n            var ele;\n            // build the top level\n            for (var i = 0, len = topLevel.getLength(); i < len; i++) {\n                if (topLevel.item(i) instanceof Element) {\n                    ele = topLevel.item(i);\n                    var name = ele.getAttribute(\"name\").split(\":\")[1].replaceAll(\"\\\"\", \"\");\n                    logger.info(name);\n                    var temp = doc.createElement(\"lst\");\n                    topLevel.appendChild(temp);\n                    temp.setAttribute(\"level\", \"0\");\n                    temp.setAttribute(\"name\", name);\n                    temp.setAttribute(\"count\", productsCount.get(name));\n                    topLevelEle.appendChild(temp);\n                }\n\n            }\n            \n\n/*\n            var prods = products.getChildNodes();\n            var product;\n            var productName;\n            for (var i = 0, len = prods.getLength(); i < len; i++) {\n                product = prods.item(i);\n                productName = product.getAttribute(\"name\");\n\n                var pele;\n                var arr;\n                var raw;\n                for (var m = 0, lenm = productLine.getLength(); m < lenm; m++) {\n                    if (productLine.item(m) instanceof Element) {\n                        pele = productLine.item(m);\n                        raw = pele.getAttribute(\"name\");\n                        arr = raw.split(\"\\\\^\");\n\n                        // logger.info(raw + \" \" + arr.length);\n\n                        for (var j = 2; j < arr.length; j++) {\n                            var cname = arr[j];\n                            var cele = doc.createElement(\"int\");\n                            products.appendChild(cele);\n                            cele.setAttribute(\"name\", cname);\n                            cele.setAttribute(\"level\", \"\" + i);\n                            var key = cname;\n                            if (key.contains(\"|\")) {\n                                key = key.substring(0, key.indexOf(\"|\"));\n                            }\n                            if (productsCount.get(key) != null) {\n                                cele.setAttribute(\"count\", productsCount.get(key));\n                            } else {\n                                cele.setAttribute(\"count\", \"1\");\n                                logger.info(\"No count found for: \" + key + \"(\" + cname + \")\");\n                            }\n                            var nextNode = i + 1;\n                            if (nextNode < arr.length - 1) {\n                                var newName = arr[nextNode];\n                                addElement(doc, cele, newName, nextNode, arr, false);\n                                break;\n                            }\n\n                        }\n\n                    }\n\n                }\n            }\n*/\n\n            // build industry tree\n            var industrySS = getFacet(facetFields, \"industryapps_ss\");\n            var industryLine = getFacet(facetFields, \"industries_applications_s\");\n            industryCount = elementsToHashCount(industrySS);\n            \n\n            var imap = buildHash(industryLine);\n            buildTree(doc, industries, industryCount, imap);\n/*\n            var iele;\n            var iname;\n            var raw;\n            var arr;\n            for (var k = 0, len = industryLine.getLength(); k < len; k++) {\n                if (industryLine.item(k) instanceof Element) {\n                    iele = industryLine.item(k);\n\n                    raw = new java.lang.String(iele.getAttribute(\"name\"));\n                    raw = raw.replaceAll(\"\\\\^\", \"***\");\n                    arr = raw.split(\"***\");\n                    for (var i = 0; i < arr.length; i++) {\n                        var cname = arr[i];\n                        var cele = doc.createElement(\"lst\");\n\n                        cele.setAttribute(\"name\", cname);\n                        cele.setAttribute(\"level\", \"\" + (i + 1));\n                        var key = cname;\n                        if (key.contains(\"|\")) {\n                            key = key.substring(0, key.indexOf(\"|\"));\n                        }\n                        if (industryCount.get(key) != null) {\n                            cele.setAttribute(\"count\", industryCount.get(key));\n                        } else {\n                            cele.setAttribute(\"count\", \"1\");\n                           logger.info(\"No count found for: \" + key + \"(\" + cname + \")\");\n                        }\n                        var nextNode = i + 1;\n                        if (nextNode < arr.length - 1) {\n                            var newName = arr[nextNode];\n                            addElement(doc, cele, newName, nextNode, arr, true);\n                            break;\n                        }\n                        industries.appendChild(cele);\n\n                    }\n                }\n            }\n\n*/\n            //logger.info(getElementString(products));\n            //logger.info(getElementString(industries));\n            doc.getDocumentElement().appendChild(taxonomyEle);\n            //logger.info(getElementString(taxonomyEle));\n            var resultDoc = getElementString(doc.getDocumentElement())\n            //logger.info(resultDoc);\n\n        } catch (e) {\n           // e.printStackTrace();\n            logger.error(e.toString());\n            doc = e.toString();\n        }\n        return resultDoc;\n    }\n\n    function getElementString(doc) {\n        var xml = \"\";\n        var ex = java.lang.Exception;\n        try {\n            var domSource = new DOMSource(doc);\n            var writer = new StringWriter();\n            var result = new StreamResult(writer);\n            var tf = TransformerFactory.newInstance();\n            var transformer = tf.newTransformer();\n            transformer.transform(domSource, result);\n            xml = writer.toString();\n        } catch (ex) {\n            logger.error(ex.toString());\n        }\n        return xml;\n    }\n\n\n    function getFacetCounts(doc) {\n\n        //.element(\"facet_counts\").element(\"facet_queries\").elements()\n        var top = doc.getElementsByTagName(\"lst\");\n\n        var ele;\n        for (var i = 0, len = top.getLength(); i < len; i++) {\n            ele = top.item(i);\n            if (ele.getAttribute(\"name\").equals(\"facet_counts\")) {\n                return ele;\n            }\n        }\n        return null;\n    }\n\n    function getFacetFields(facet) {\n\n        //.element(\"facet_counts\").element(\"facet_queries\").elements()\n        var top = facet.getElementsByTagName(\"lst\");\n\n        var ele;\n        for (var i = 0, len = top.getLength(); i < len; i++) {\n            ele = top.item(i);\n            if (ele.getAttribute(\"name\").equals(\"facet_fields\")) {\n                return ele;\n            }\n        }\n        return null;\n    }\n\n    function getTopLevel(ele) {\n        var temp = ele.getElementsByTagName(\"lst\");\n\n        var cele;\n        for (var i = 0, len = temp.getLength(); i < len; i++) {\n            cele = temp.item(i);\n            if (cele.getAttribute(\"name\").equals(\"facet_queries\")) {\n                return cele.getChildNodes();\n            }\n        }\n\n        return null;\n    }\n\n    function getFacet(fields, key) {\n        var eles = null;\n        var top = fields.getChildNodes();\n        var cele;\n        for (var i = 0, len = top.getLength(); i < len; i++) {\n            if (top.item(i) instanceof Element) {\n                cele = top.item(i);\n                if (cele.getAttribute(\"name\").equals(key)) {\n                    return cele.getChildNodes();\n                }\n            }\n        }\n\n        return eles;\n    }\n\n\n    function elementsToHashCount(top) {\n        var hash = new HashMap();\n\n        var cele;\n        for (var i = 0, len = top.getLength(); i < len; i++) {\n            if (top.item(i) instanceof Element) {\n                cele = top.item(i);\n                var name = cele.getAttribute(\"name\");\n                var count = cele.getTextContent();\n\n                hash.put(name, count);\n            }\n\n        }\n        return hash;\n    }\n\n    function addElement(doc, parent, childName, level, arr, isIndustry) {\n        var child = doc.createElement(\"int\");\n\n        parent.appendChild(child);\n        child.setAttribute(\"name\", childName);\n        if (isIndustry) {\n            child.setAttribute(\"level\", \"\" + (level + 1));\n        } else {\n            child.setAttribute(\"level\", \"\" + level);\n        }\n\n        var key = new String(childName);\n        if (key.contains(\"|\")) {\n            key = key.substring(0, key.indexOf(\"|\"));\n        }\n        if (productsCount.get(key) != null) {\n            child.setAttribute(\"count\", productsCount.get(key));\n        } else {\n            child.setAttribute(\"count\", \"1\");\n            //logger.warn(\"No count found for: \" + key + \"(\" + child +\")\");\n        }\n\n        if (level < arr.length - 1) {\n            level++;\n            var newChildName = arr[level];\n            addElement(doc, child, newChildName, level, arr, isIndustry);\n        }\n\n\n    }\n\n\n    function getDocument(data) {\n        var ddoc = null;\n        var e = java.lang.Exception;\n        try {\n            var source = new InputSource(new StringReader(data));\n            var dbFactory = DocumentBuilderFactory.newInstance();\n            var dBuilder = dbFactory.newDocumentBuilder();\n            ddoc = dBuilder.parse(source);\n            ddoc.getDocumentElement().normalize();\n            logger.info(\"Root element :\" + ddoc.getDocumentElement().getNodeName());\n\n        } catch (e) {\n            logger.error(e.toString());\n        }\n\n        return ddoc;\n    }\n\n\n    function buildHash( list) {\n\n        var ele;\n        var key0 = \"\", key1 = \"\", key2 = \"\", key3 = \"\", key4 = \"\", key5 = \"\", key6 = \"\";\n        var map = new HashMap();\n\n        for (var i = 0, len = list.getLength(); i < len; i++) {\n            key0 = \"\";\n            key1 = \"\";\n            key2 = \"\";\n            key3 = \"\";\n            key4 = \"\";\n            key5 = \"\";\n            key6 = \"\";\n            if (list.item(i) instanceof Element) {\n                ele =  list.item(i);\n                var line = ele.getAttribute(\"name\");\n\n                logger.info(line);\n                var raw = new java.lang.String(line);\n                raw = raw.replaceAll(\"\\\\^\", \"***\");\n                var arr = raw.split(\"***\");\n                // enterprise team changes (bug fix)\n                // var pipeSplit = raw.split(\"|\");\n                // for ( var k =0; k <pipeSplit.length; k++){\n                //     var arr = pipeSplit[k].split(\"***\");\n\n                //var arr = line.split(\"\\\\^\");\n                logger.info(\"\\t raw: \" + raw);\n                logger.info(\"\\t Arr: \" + arr.length);\n                for (var j = 0; j < arr.length; j++) {\n                    switch (j) {\n                        case 0:\n                            key0 = arr[j];\n                            if(map.get(key0) == null) {\n                                map.put(key0, new HashMap());\n                            }\n                            break;\n\n                        case 1:\n                            key1 = arr[j];\n                            if (map.get(key0).get(key1) == null) {\n                                map.get(key0).put(key1, new HashMap());\n                            }\n                            break;\n\n                        case 2:\n                            key2 = arr[j];\n                            if (map.get(key0).get(key1).get(key2) == null) {\n                                map.get(key0).get(key1).put(key2, new HashMap());\n                            }\n                            break;\n\n                        case 3:\n                            key3 = arr[j];\n                            if (map.get(key0).get(key1).get(key2).get(key3) == null) {\n                                map.get(key0).get(key1).get(key2).put(key3, new HashMap());\n                            }\n                            break;\n\n                        case 4:\n                            key4 = arr[j];\n                            if (map.get(key0).get(key1).get(key2).get(key3).get(key4) == null) {\n                                map.get(key0).get(key1).get(key2).get(key3).put(key4, new HashMap());\n                            }\n                            break;\n\n                        case 5:\n                            key5 = arr[j];\n                            if (map.get(key0).get(key1).get(key2).get(key3).get(key4).get(key5) == null) {\n                                map.get(key0).get(key1).get(key2).get(key3).get(key4).put(key5, new HashMap());\n                            }\n                            break;\n\n\n                    }\n                }\n                logger.info(\"len: \" + map.size());\n            }\n        //}\n        }\n\n        return map;\n    }\n\n    function getItemCount( key, countList){\n        if(countList.get(key) != null){\n            return countList.get(key);\n        } else {\n            return \"1\";\n        }\n    }\n\n\n    function buildTree( doc,  parent, countList, map) {\n        var key0 = \"\", key1 = \"\", key2 = \"\", key3 = \"\", key4 = \"\", key5 = \"\", key6 = \"\";\n        var iter0 = map.keySet().iterator();\n        try{\n            while (iter0.hasNext()) {\n                key0 = iter0.next();\n                var temp0 = doc.createElement(\"obj\");\n                temp0.setAttribute(\"name\", key0);\n                temp0.setAttribute(\"level\", \"0\");\n                temp0.setAttribute(\"count\", getItemCount(key0, countList));\n                parent.appendChild(temp0);\n                if (map.get(key0) != null && map.get(key0).size() > 0) {\n                    var iter1 = map.get(key0).keySet().iterator();\n                    logger.info(\"***tree level 0 \");\n                    while (iter1.hasNext()) {\n                        key1 = iter1.next();\n                        var temp1 = doc.createElement(\"obj\");\n                        temp1.setAttribute(\"name\", key1);\n                        temp1.setAttribute(\"level\", \"1\");\n                        temp1.setAttribute(\"count\", getItemCount(key1, countList));\n                        temp0.appendChild(temp1);\n                        if (map.get(key0).get(key1) != null && map.get(key0).get(key1).size() > 0) {\n                            var iter2 = map.get(key0).get(key1).keySet().iterator();\n                            logger.info(\"***tree level 1 \");\n                            while (iter2.hasNext()) {\n                                key2 = iter2.next();\n                                var temp2 = doc.createElement(\"obj\");\n                                temp2.setAttribute(\"name\", key2);\n                                temp2.setAttribute(\"level\", \"2\");\n                                temp2.setAttribute(\"count\", getItemCount(key2, countList));\n                                temp1.appendChild(temp2);\n                                if (map.get(key0).get(key1).get(key2) != null && map.get(key0).get(key1).get(key2).size() > 0) {\n                                    var iter3 = map.get(key0).get(key1).get(key2).keySet().iterator();\n                                    logger.info(\"***tree level 2 \");\n                                    while (iter3.hasNext()) {\n                                        key3 = iter3.next();\n                                        var temp3 = doc.createElement(\"obj\");\n                                        temp3.setAttribute(\"name\", key3);\n                                        temp3.setAttribute(\"level\", \"3\");\n                                        temp3.setAttribute(\"count\", getItemCount(key3, countList));\n                                        temp2.appendChild(temp3);\n                                        if (map.get(key0).get(key1).get(key2).get(key3) != null &&\n                                            map.get(key0).get(key1).get(key2).get(key3).size() > 0) {\n                                            var iter4 = map.get(key0).get(key1).get(key2).get(key3).keySet().iterator();\n                                            logger.info(\"***tree level 3 \");\n                                            while (iter4.hasNext()) {\n                                                key4 = iter4.next();\n                                                var temp4 = doc.createElement(\"obj\");\n                                                temp4.setAttribute(\"name\", key4);\n                                                temp4.setAttribute(\"level\", \"4\");\n                                                temp4.setAttribute(\"count\", getItemCount(key4, countList));\n                                                temp3.appendChild(temp4);\n                                                if (map.get(key0).get(key1).get(key2).get(key3).get(key4) != null &&\n                                                    map.get(key0).get(key1).get(key2).get(key3).get(key4).size() > 0) {\n                                                    var iter5 = map.get(key0).get(key1).get(key2).get(key3).get(key4).keySet().iterator();\n                                                    logger.info(\"***tree level 4 \");\n                                                    while (iter5.hasNext()) {\n                                                        logger.info(\"***inside tree level 4 \");\n                                                        key5 = iter5.next();\n                                                        var temp5 = doc.createElement(\"obj\");\n                                                        temp5.setAttribute(\"name\", key5);\n                                                        temp5.setAttribute(\"level\", \"5\");\n                                                        temp5.setAttribute(\"count\", getItemCount(key5, countList));\n                                                        temp4.appendChild(temp5);\n                                                    }\n                                                }\n\n\n                                            }\n                                        }\n                                    }\n\n                                }\n                            }\n                        }\n\n                    }\n                }\n\n            }\n        } catch(e) {\n            logger.error(e.toString());\n        }\n    }\n\n    return {\n        \"build\": function (data) {\n            return _build(data);\n        }\n    }\n}\n\n/********************\n * END TAXONOMY BUILDER\n *******************/\n\n\nfunction isValidKey(key){\n    var keys = [\"lw.pipelineId\",\"context\",\"queryProfileID\",\"q\",\"wt\",\"profile\"];\n    for(var i=0; i<keys.length; i++){\n        if(keys[i] === key){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction buildQueryString(request){\n    var String = java.lang.String;\n    var queryString = \"?wt=xml&q=\";\n    queryString += request.getFirstFieldValue(\"q\");\n    var count = 0;\n    var allParams = request.getParams();\n   \n    for each(var key in allParams.keySet()){\n        if(isValidKey(key)){ \n          var params = request.getParam(key);\n          var iter = params.iterator();\n          while(iter.hasNext()){\n            var value = new String(iter.next());\n            var value1 = value.replaceAll(\" \", \"%20\");\n            var value2 = value1.replaceAll(\"\\\"\", \"%22\");\n            var value3 = value2.replaceAll(\"&\", \"%26\");\n            logger.info(\"*** Param: \" + key + \" value \" + value);\n            //if(count > 0){\n              queryString += \"&\";\n            //}                  \n            queryString += key + \"=\" +  value3;//value.substring(1, value.length-1);           \n            count++;\n          }         \n        }\n    }\n    logger.warn(\"QUERY STRING: \" + queryString);\n\n       /*\n    var params = request.getParams();\n    var paramIter = params.keySet().iterator();\n    var count =0;\n    var key = \"\";\n    var value = \"\";\n    queryString += request.getFirstFieldValue(\"q\");\n    \n    while(paramIter.hasNext()){\n        key = paramIter.next();\n        if(isValidKey(key)){ \n        if(count > 0){ \n            queryString += \"&\";\n        }\n          value = request.getFirstFieldValue(key);\n          queryString += key + \"=\" + value;//value.substring(1, value.length-1);\n        }\n        count++;\n\n    }\n    */\n    return queryString;\n}\n\n\nfunction (request, response, _context, collection, solrServer, solrClientFactory) {\n    var IOUtils = org.apache.commons.io.IOUtils;\n    var Document = org.dom4j.Document;\n    var Element = org.dom4j.Element;\n    var DocumentHelper = org.dom4j.DocumentHelper;\n    //var SaxReader = org.dom4j.io.SAXReader;\n    var Jsoup = org.jsoup.Jsoup;\n\n    var json = {};\n    if (request.getParams() !== null) {\n        json[\"msg\"] = \"request NOT NULL\";\n        var map = request.getParams();\n        var str = \"\";\n        var value = \"\";\n\n    }\n\n    var builder = new TaxonomyBuilder();\n\n\n\n    var docs = doHttpQuery(request);\n    //var tdoc = Jsoup.parse(docs);\n    //var tdoc = reader.read(new StringReader(docs));\n    //var tdoc =  org.dom4j.DocumentHelper.parseText(docs);\n     \n\n    var newDoc = builder.build(docs);\n\n    var xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"; \n  \n\n    //json[\"docs\"] = JSON.stringify(docs);\n    //var result = docs[\"result\"];\n    //var resultJson = JSON.parse(result.toString());\n    // this is your docs array that you'll modify and load back into the request.\n    //var jsonDocs = resultJson.response.docs;\n    //json[\"docs_result\"] = JSON.stringify(jsonDocs);\n    //var someObject = new java.lang.String(\"{\\\"response\\\":{\\\"numFound\\\":7,\\\"start\\\":0,\\\"maxScore\\\":1.0,\\\"over\\\":\" + JSON.stringify(docs) + \" }}\"); //\n    var someObject = \"\";\n    if(newDoc){\n      someObject = newDoc;//docs;//JSON.stringify(docs);\n    } else {\n        someObject = docs;\n    }\n\n  \n    //someObject += buildQueryString(request);\n\n\n\n    var stream = new java.io.ByteArrayInputStream(someObject.getBytes(\"UTF-8\"));\n    var v2 = new com.lucidworks.apollo.solr.response.RawResponse(stream, \"application/xml\", \"UTF-8\");\n    var newResponse = new com.lucidworks.apollo.pipeline.query.Response(null, v2);\n    var queryRequestAndResponse = com.lucidworks.apollo.pipeline.query.QueryRequestAndResponse.create(request, newResponse, 1);\n    return queryRequestAndResponse;\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": false,
      "label": "override",
      "condition": "request.hasParam(\"profile\")"
    },
    {
      
      "script": "\n\n\nfunction buildFacetNode(data,request){   \n    var Element = org.w3c.dom.Element;\n    var PRODUCT_LINE_PREFIX_PARAM_NAME = \"f.product_line_facet_ss.facet.prefix\"\n    var PRODUCT_LINE_PREFIX_DEFAULT_VALUE = \"1^\"\n    \n    try{\n        var doc = getDocument(data)\n        var lstInDocument = doc.getElementsByTagName(\"lst\")\n    } catch(e){\n        return null;\n    }\n\n    for (var i = 0; i < lstInDocument.length; i++) {\n        var element = lstInDocument.item(i);\n        if (element.getAttribute(\"name\") === \"facet_fields\") {\n            var facets = element;\n            //break;\n        }\n        if (element.getAttribute(\"name\") === \"facets\") {\n            var json_facets = element;\n            var json_facets_exists = true;\n           //break;\n        }\n    }\n\n    var productLineFacet = doc.createElement(\"lst\");\n    var children = facets.getChildNodes();\n    \n    var json_children = []\n    if(json_facets_exists){\n        json_children = json_facets.getChildNodes();\n    }\n    var facets_p2 = doc.createElement(\"taxonomies_p2\");\n    \n    var ia_dictionaries = {};\n    var wc_dictionaries = {};\n    var partsCount = 0;\n    for (var i = 0; i < json_children.length ; i++){\n        var child = json_children.item(i);\n        if(child.getChildNodes().length > 0){\n            if (child instanceof Element){\n                var buckets = child.getChildNodes();\n                for(var bucket_len = 0; buckets.item(bucket_len) && bucket_len < buckets.getLength(); bucket_len++){\n                    var bucketNode = buckets.item(bucket_len);\n                    if(bucketNode){\n                       var lstNodes = bucketNode.getChildNodes();\n                    }\n                    if(lstNodes){\n                        for (var k = 0; k < lstNodes.getLength(); k++) {\n                           var lstNode = lstNodes.item(k);\n                            if(lstNode){\n                                var valCountNodes = lstNode.getChildNodes();\n                                var val_name = null;\n                                var val_count = 0;\n                                for (l = 0; l < valCountNodes.getLength(); l++) {\n                                    var valCountNode = valCountNodes.item(l);\n                                    if (valCountNode && \"str\".equals(valCountNode.getNodeName())) {\n                                        val_name = valCountNode.getTextContent();\n                                    } else if (valCountNode && \"long\".equals(valCountNode.getNodeName())) {\n                                        val_count = parseInt(valCountNode.textContent);\n                                    }\n                                }\n                                if (val_count && val_name){\n                                    // Industries & Applications\n                                    var child_name = child.getAttribute(\"name\")\n                                    if(child_name.startsWith(\"ia\") && child_name != \"ia_missing\"){\n                                        if (val_name && val_count){ // AGAIN \n                                            // val_name can be null even with double validation\n                                            var split_name = val_name.split(\"^\");\n                                            var ia_name_0 = split_name[0];\n                                            var dict_key = split_name[1];\n                                            var item_name = split_name[2];\n                                            if (!ia_dictionaries[child_name]) {\n                                                ia_dictionaries[child_name] = {};\n                                            }\n                                            var ia_dictionary = ia_dictionaries[child_name];\n                                            if (!ia_dictionary[dict_key]) {\n                                                ia_dictionary[dict_key] = { name: dict_key, ia_name: ia_name_0, ia_field: child_name, items: [] };\n                                            }\n                                            var groupObj = ia_dictionary[dict_key];\n                                            var itemObj = { name: item_name, count: val_count};\n                                            groupObj.items.push(itemObj);\n                                        }\n\n                                    } else{ //Doc Type\n                                        if(val_name && child.getAttribute(\"name\") === \"facet_doc_type\"){\n                                            var split_name = val_name.split(\"^\");\n                                            var wc_name_0 = split_name[0];\n                                            var dict_key = split_name[1];\n                                            if(wc_name_0 === \"Parts\"){\n                                                var translationCT = getTranslationContentType(request);\n                                                logger.info(\"jvar \"+translationCT);\n                                                if (translationCT !== \"\") {\n                                                    wc_name_0 = translationCT\n                                                    dict_key = \"Parts\"\n                                                } else {\n                                                    if (partsCount === 0) {\n                                                        partsCount = val_count;\n                                                    }\n                                                }\n                                            }\n                                            if (dict_key !== undefined) {\n                                                if (!wc_dictionaries[wc_name_0]) {\n                                                    wc_dictionaries[wc_name_0] = {};\n                                                }\n                                                var wc_dictionary = wc_dictionaries[wc_name_0];\n                                                if (!wc_dictionary[dict_key]) {\n                                                    wc_dictionary[dict_key] = { name: dict_key, wc_name: wc_name_0, items: [] };\n                                                    if (partsCount > 0) {\n                                                        wc_dictionary[\"Parts\"] = { name: \"Parts\", wc_name: wc_name_0, items: [] };\n                                                    }\n                                                }\n\n                                                var groupObj = wc_dictionary[dict_key];\n                                                var itemObj = { name: dict_key, count: val_count };\n                                                groupObj.items.push(itemObj);\n                                                if (partsCount > 0) {\n                                                    groupObj = wc_dictionary[\"Parts\"];\n                                                    itemObj = { name: \"Parts\", count: partsCount};\n                                                    groupObj.items.push(itemObj);\n                                                }\n                                            }\n                                        }\n                                    }                       \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n     for (var i = 0; i < children.length ; i++){\n        var child = children.item(i);\n        //if(child.getChildNodes().length > -1){ Last Child Fix\n            if (child instanceof Element){\n               //Product Line\n                if(child.getAttribute(\"name\")===\"product_line_facet_ss\"){\n                    var pl_dictionaries = {};\n                    productLineFacet.setAttribute(\"id\",\"product_line\")\n                    productLineFacet.setAttribute(\"hierarchical\",\"true\")\n                    productLineFacet.setAttribute(\"multi_selectable\",\"false\")\n                    productLineFacet.setAttribute(\"grouping_id\",\"product_line\")\n                    productLineFacet.setAttribute(\"level\",\"0\")\n                    var product_line_children = child.getChildNodes();\n                    for(var product_index=0; product_index < product_line_children.getLength(); product_index++){\n                    \n                            if (product_line_children.item(product_index) instanceof Element) {\n                                var product_item = product_line_children.item(product_index);\n                                var split_name = product_item.getAttribute(\"name\").split(\"^\")\n                                var language_label = split_name[1];\n                                var display_product_name = getProductLineDisplayValue(product_item.getAttribute(\"name\"));\n                                var product_count = product_item.getTextContent();\n\n                                if(!pl_dictionaries[language_label]){ //Language nodes\n                                    pl_dictionaries[language_label] = {};\n                                }\n                                var pl_dictionary = pl_dictionaries[language_label]\n                                if(!pl_dictionary[display_product_name]){\n                                    pl_dictionary[display_product_name] = { name: product_item.getAttribute(\"name\") , display_name: display_product_name, items: [] }\n                                }\n\n                                var groupObj = pl_dictionary[display_product_name];\n                                var itemObj = { name: display_product_name, count: product_item.getTextContent()}\n                                groupObj.items.push(itemObj);\n                            }                            \n                    }\n                    \n                    var currentFilter = request.getFirstParam(PRODUCT_LINE_PREFIX_PARAM_NAME);\n                    if(currentFilter)\n                    {\n                        var lineage = getProductLineLineage(currentFilter);\n                        productLineFacet.setAttribute(\"filter_lineage\",lineage.filterLineage.join('|'));\n                        productLineFacet.setAttribute(\"prefix_lineage\",lineage.prefixLineage.join('|'));\n                        productLineFacet.setAttribute(\"display_lineage\",lineage.displayLineage.join('|'));\n                    }\n                }\n\n            }\n        //}\n    }\n\n    if (pl_dictionaries) {\n        var plNames = Object.keys(pl_dictionaries);\n        var ParentProductGroupElementCount = 0;\n        for (var i = 0; i < plNames.length; i++) { //For each language wrapper\n            var plName = plNames[i];\n            var plDictionary = pl_dictionaries[plName];\n            var plElement = doc.createElement(\"obj\");\n            plElement.setAttribute(\"display_name\", plName);\n            plElement.setAttribute(\"grouping_label\", plName);\n            plElement.setAttribute(\"level\", \"1\");\n            var groupedNames = Object.keys(plDictionary);\n            for (var j = 0; j < groupedNames.length; j++) { // For each Key\n                var dictKey = groupedNames[j];\n                var groupObj = plDictionary[dictKey];\n                var groupElement = doc.createElement(\"obj\");\n                var prefixAndLevel = getProductLineLevelAndPrefix(groupObj.name);\n                groupElement.setAttribute(\"filter_value\", groupObj.name);\n                groupElement.setAttribute(\"filter_prefix\", prefixAndLevel.prefixFilter );\n                groupElement.setAttribute(\"filter_field\", \"product_line_facet_ss\");\n                groupElement.setAttribute(\"filter_field_prefix\", PRODUCT_LINE_PREFIX_PARAM_NAME);\n                groupElement.setAttribute(\"display_name\", groupObj.display_name);\n                groupElement.setAttribute(\"level\", prefixAndLevel.level +1); // +1 for testing purposes.\n                var groupElementCount = 0;\n                var items = groupObj.items;\n\n                for (var k = 0; k < items.length; k++) { // For each Value\n                    var itemObj = items[k];\n                    groupElementCount+= parseInt(itemObj.count);\n                }\n                ParentProductGroupElementCount+=groupElementCount;\n                plElement.setAttribute(\"count\", ParentProductGroupElementCount);\n\n                groupElement.setAttribute(\"count\", groupElementCount); // Ke\n\n                \n                if (plNames.length == 0){\n                    var plElement = doc.createElement(\"obj\");\n                    plElement.setAttribute(\"display_name\", \"\");\n                    plElement.setAttribute(\"grouping_label\", \"\");\n                    plElement.setAttribute(\"level\", \"1\");\n                }\n                plElement.appendChild(groupElement);\n                \n            }\n            sortXML(plElement);\n            productLineFacet.appendChild(plElement);\n        }\n    }\n    // to set the obj tag with count for the last heirarichal facet\n    if(Object.keys(pl_dictionaries).length == 0) {\n        for (var i = 0; i < children.length ; i++){\n            var child = children.item(i);\n            if (child instanceof Element){\n                if(child.getAttribute(\"name\")===\"product_line_s\"){\n                var product_line_children = child.getChildNodes();\n                var last_child_count = 0;\n                    for(var product_index=0; product_index < product_line_children.getLength(); product_index++){\n                        if (product_line_children.item(product_index) instanceof Element) {\n                            var product_item = product_line_children.item(product_index);\n                            //var split_name = product_item.getAttribute(\"name\").split(\"^\")\n                            last_child_count += parseInt(product_item.getTextContent());\n                        }\n                    }\n                }\n            }\n        }\n        var plElement = doc.createElement(\"obj\");\n        plElement.setAttribute(\"display_name\", \"Products\");\n        plElement.setAttribute(\"grouping_label\", \"Products\");\n        plElement.setAttribute(\"count\", last_child_count);\n        plElement.setAttribute(\"level\", \"1\");\n        plElement.setAttribute(\"filter_field\", \"product_line_facet_ss\");\n        plElement.setAttribute(\"filter_field_prefix\", PRODUCT_LINE_PREFIX_PARAM_NAME);\n        sortXML(plElement);\n        productLineFacet.appendChild(plElement);\n    }\n\n\n    var wc_wrapper = doc.createElement(\"lst\");\n    wc_wrapper.setAttribute(\"id\", \"content_type\");\n    wc_wrapper.setAttribute(\"hierarchical\", \"false\");\n    wc_wrapper.setAttribute(\"multi_selectable\", \"true\");\n    wc_wrapper.setAttribute(\"grouping_id\",\"content_type\")\n    wc_wrapper.setAttribute(\"level\", \"0\");\n\n    if (wc_dictionaries) {\n        var wcNames = Object.keys(wc_dictionaries);\n        logger.warn(\"check count ....  \"+wc_dictionaries);\n        for (var i = 0; i < wcNames.length; i++) { //For each language wrapper\n        logger.warn(\"check count ....  \"+wc_dictionaries[wcNames[i]]);\n            var wcName = wcNames[i];\n            var wcDictionary = wc_dictionaries[wcName];\n            var wcElement = doc.createElement(\"obj\");\n            wcElement.setAttribute(\"display_name\", wcName);\n            wcElement.setAttribute(\"grouping_label\", wcName);\n            wcElement.setAttribute(\"level\", \"1\");\n            \n            var groupedNames = Object.keys(wcDictionary);\n            var ParentGroupElementCount = 0;\n            for (var j = 0; j < groupedNames.length; j++) { // For each Key\n                var dictKey = groupedNames[j];\n                var groupObj = wcDictionary[dictKey];\n                var groupElement = doc.createElement(\"obj\");\n                \n                if(groupObj.name != \"Parts\"){\n                    groupElement.setAttribute(\"filter_value\", groupObj.wc_name+\"^\"+groupObj.name);\n                } else {\n                    groupElement.setAttribute(\"filter_value\", groupObj.name);\n                }\n                \n                groupElement.setAttribute(\"filter_field\", \"facet_doc_type\");\n                groupElement.setAttribute(\"display_name\", groupObj.name);\n                groupElement.setAttribute(\"level\", \"2\");\n                var groupElementCount = 0;\n                var items = groupObj.items;\n                for (var k = 0; k < items.length; k++) { // For each Value\n                    var itemObj = items[k];\n                    groupElementCount+= parseInt(itemObj.count);\n                }\n                ParentGroupElementCount+=groupElementCount;\n                groupElement.setAttribute(\"count\", groupElementCount);\n                wcElement.setAttribute(\"count\", ParentGroupElementCount);\n                wcElement.appendChild(groupElement);\n            }\n            sortXML(wcElement);\n            wc_wrapper.appendChild(wcElement);\n        }\n    }\n\n    if (ia_dictionaries) {\n        var iaNames = Object.keys(ia_dictionaries);\n        for (var i = 0; i < iaNames.length; i++) { //For each language wrapper\n            var iaName = iaNames[i];\n            var iaDictionary = ia_dictionaries[iaName];\n            var iaElement = doc.createElement(\"lst\");\n            iaElement.setAttribute(\"hierarchical\", \"false\");\n            iaElement.setAttribute(\"multi_selectable\", \"true\");\n            iaElement.setAttribute(\"grouping_id\",\"industries_applications\")\n            iaElement.setAttribute(\"id\", iaName);\n            iaElement.setAttribute(\"level\", \"0\");\n            var ia_category_count = 0\n            var groupedNames = Object.keys(iaDictionary);\n            for (var j = 0; j < groupedNames.length; j++) { // For each Key\n                var dictKey = groupedNames[j];\n                var groupObj = iaDictionary[dictKey];\n                var groupElement = doc.createElement(\"obj\");\n                //groupElement.setAttribute(\"name\", groupObj.ia_name+\"^\"+groupObj.name);\n                groupElement.setAttribute(\"grouping_label\", groupObj.ia_name);\n                groupElement.setAttribute(\"filter_field\", groupObj.ia_field);\n                groupElement.setAttribute(\"display_name\", groupObj.name);\n                groupElement.setAttribute(\"level\", \"1\");\n                var groupElementCount = 0;\n                var items = groupObj.items;\n                for (var k = 0; k < items.length; k++) { // For each Value\n                    var itemObj = items[k];\n                    var itemElement = doc.createElement(\"obj\");\n                    itemElement.setAttribute(\"filter_value\", groupObj.ia_name+\"^\"+groupObj.name+\"^\"+itemObj.name);\n                    itemElement.setAttribute(\"display_name\", itemObj.name);\n                    itemElement.setAttribute(\"filter_field\", groupObj.ia_field);\n                    itemElement.setAttribute(\"count\", itemObj.count);\n                    itemElement.setAttribute(\"level\", \"2\");\n                    groupElement.appendChild(itemElement);\n                    groupElementCount+= parseInt(itemObj.count);\n                }\n                ia_category_count += groupElementCount;\n                groupElement.setAttribute(\"count\", groupElementCount);\n                iaElement.appendChild(groupElement);\n            }\n            iaElement.setAttribute(\"count\", ia_category_count);\n            sortXML(iaElement);\n            facets_p2.appendChild(iaElement);\n        }  \n    }\n\n    sortXML(facets_p2);\n\n    facets_p2.insertBefore(productLineFacet,facets_p2.firstChild)\n    facets_p2.insertBefore(wc_wrapper,facets_p2.firstChild)\n    doc.documentElement.appendChild(facets_p2);\n    return doc;\n}\n\nfunction getTranslationContentType(request) {\n\n    var CONTENT_TYPE_LANGUAGE_VALUES  = {\n        en_US:[\"Content Type\"],\n        en_AU:[\"Content Type\"],\n        en_GB:[\"Content Type\"],\n        en_ID:[\"Content Type\"],\n        en_IN:[\"Content Type\"],\n        en_MX:[\"Content Type\"],\n        en_ZA:[\"Content Type\"],\n        es_MX:[\"Tipo de Contenido\"],\n        fr_FR:[\"Type de contenu\"],\n        fr_US:[\"Type de contenu\"],\n        zh_CN:[\"内容类型\"],\n        id_ID:[\"Jenis konten\"],\n        ja_JP:[\"コンテンツタイプ\"],\n        ko_KR:[\"컨텐츠 타입\"],\n        nl_NL:[\"Inhoudstype\"],\n        de_DE:[\"Inhaltstyp\"],\n        it_IT:[\"Tipo di contenuto\"],\n        pl_PL:[\"Typ zawartości\"],\n        ru_RU:[\"Тип содержимого\"],\n        sv_SE:[\"Innehållstyp\"],\n        pt_BR:[\"Tipo de conteúdo\"],\n        ar_SA:[\"المحتوى\"],\n        tr_TR:[\"İçerik türü\"],\n        es_ES:[\"Tipo de Contenido\"],\n        zh_TW:[\"內容類型\"],\n        es_US:[\"Tipo de Contenido\"]\n    };\n        \n    var language = \"\";\n    if (request.getParams() !== null) {\n        var fqParams = request.getParam(\"fq\");\n        var qvalue = request.getParam(\"q\");\n        var regexConst = /([0-9\\ \\% - \\_]+)/;\n        if (fqParams !== undefined) {\n            for (var i = 0; i < fqParams.length; i++) {\n                var fq = fqParams[i].split(\"%3A\");\n                if (fq[0] === \"language\") {\n                    language = fq[1];\n                }\n            }\n        }\n    }\n    \n    if (language !== \"\") {\n        var contentTypeTranslated = \"Content Type\";\n        if (CONTENT_TYPE_LANGUAGE_VALUES[language] === undefined) {\n            language = \"en_US\"\n        }\n        return contentTypeTranslated = CONTENT_TYPE_LANGUAGE_VALUES[language][0];\n    } else {\n        return \"\";\n    }   \n}\n\nfunction sortXML(element_to_sort){ //Sort by count attribute\n    var items = element_to_sort.getChildNodes();\n    var itemsArr = [];\n    for (var i = 0; i < items.length; i++) {\n        itemsArr.push(items.item(i));\n    }\n    itemsArr.sort(function(a, b) {\n        var countA = parseInt(a.getAttribute('count')) || 0;\n        var countB = parseInt(b.getAttribute('count')) || 0;\n        return countB - countA;\n    });\n    \n    for (i = 0; i < itemsArr.length; ++i) {\n      element_to_sort.appendChild(itemsArr[i]);\n    }\n}\n\n\nfunction getProductLineLevelAndPrefix(filterString) {\n    var subsections = filterString.split('^');\n    var current = parseInt(subsections[0], 10);\n    subsections[0] = (current + 1).toString();\n    var toReturn = {  level: current, prefixFilter:subsections.join('^')};\n    return toReturn;\n}\n\nfunction getProductLineLineage(currentPrefix)\n{   \n    var SEPARATOR = \"^\"\n    var SEPARATOR_ENCODED = \"%5E\"  \n    var filterLineage = []\n    var prefixLineage = []\n    var displayLineage = []\n    var sections = currentPrefix.split(SEPARATOR_ENCODED)\n    var toReturn = {  filterLineage: filterLineage, prefixLineage: prefixLineage, displayLineage: displayLineage };\n    if (sections.length === 1) {\n        return toReturn\n    }        \n    \n    for (i = 0; i < sections.length; i++) {\n        sections[i] = decodeURIComponent(sections[i])\n    }\n    \n    for (j = 2; j < sections.length - 1; j++) {\n        var level = j + 1;\n        var slice = sections.slice(1, level)\n        var prefix = j + SEPARATOR + slice.join(SEPARATOR) + SEPARATOR\n        var filter = j - 1 + SEPARATOR + slice.join(SEPARATOR) + SEPARATOR\n        prefixLineage.push(prefix);\n        filterLineage.push(filter);\n        displayLineage.push(sections[j])\n    }\n    return toReturn;\n}\n\nfunction getProductLineDisplayValue(fullPath)\n{\n    var SEPARATOR = \"^\"\n    var components = fullPath.split(SEPARATOR)\n    return components[parseInt(components[0])+1]\n}\n\nfunction getIADisplayValue(name) {\n    var parts = name.split('_');\n    var formattedName = parts.map(function(part) {\n        return part.charAt(0).toUpperCase() + part.slice(1);\n    }).join(' ');\n    return formattedName.slice(3);\n}\n\n\nfunction (request, response, ctx) { //MAIN\n\n  var data = response.getInnerResponse();\n  var taxonomies_p2 = buildFacetNode(data,request);\n\n  var xmlBytes = new java.lang.String(docToString(taxonomies_p2)).getBytes(\"UTF-8\");\n\n  var stream = new java.io.ByteArrayInputStream(xmlBytes);\n  var v2 = new com.lucidworks.apollo.solr.response.RawResponse(stream, \"application/xml\", \"UTF-8\");\n  var newResponse = new com.lucidworks.apollo.pipeline.query.Response(null, v2);\n  var queryRequestAndResponse = com.lucidworks.apollo.pipeline.query.QueryRequestAndResponse.create(request, newResponse, 1);\n  return queryRequestAndResponse;\n}\n\nfunction docToString(doc) {\n    var transformerFactory = javax.xml.transform.TransformerFactory.newInstance();\n    var transformer = transformerFactory.newTransformer();\n    var writer = new java.io.StringWriter();\n    transformer.transform(new javax.xml.transform.dom.DOMSource(doc), new javax.xml.transform.stream.StreamResult(writer));\n    return writer.toString();\n}\n\nfunction getDocument(data) {\n    var ddoc = null;\n    try {\n        var dbFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();\n        var dBuilder = dbFactory.newDocumentBuilder();\n        var inputSource = new org.xml.sax.InputSource(new java.io.StringReader(data));\n        ddoc = dBuilder.parse(inputSource);\n        ddoc.getDocumentElement().normalize();\n    } catch (e) {\n        logger.error(e.toString());\n    }\n    return ddoc;\n}\n",
      "shareState": true,
      "type": "javascript-query",
      "skip": false,
      "label": "Generate taxonomies_p2 [Phase 2]",
      "condition": "(request.getFirstFieldValue(\"profile\") === \"CAT\") "
    },
    {
      
      "script": "function (request, response, ctx) {\n  var start = new Date();\n  ctx.put(\"startTime2\", start)\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": true,
      "label": "[TEST] Initial time add node"
    },
    {
      
      "script": "function (request, response, ctx) {\n\n  var predictedLabel = ctx.get(\"predictedIntentLabel\");\n  var displayLabel = ctx.get(\"displayLabel\");\n  var predictedIntentScore = ctx.get(\"predictedIntentScore\");\n  var userQuery = ctx.get(\"userQuery\");\n\n  if (!predictedLabel || !predictedIntentScore || !userQuery) {\n    return;\n  }\n\n  var doc = getXMLDocument(response.getInnerResponse());\n  var p3Node = doc.createElement(\"p3\");\n  var queryIntentNode = doc.createElement(\"query_intent\");\n\n  logger.info(\"ML_INTENT_PREDICTION: \" + \"query: \" + userQuery + \"||predicted_label: \" + predictedLabel + \"||display_label: \" + displayLabel+\"||score: \" + predictedIntentScore);\n  queryIntentNode.setAttribute(\"predicted_label\", predictedLabel);\n  queryIntentNode.setAttribute(\"display_label\", displayLabel);\n  queryIntentNode.setAttribute(\"score\", predictedIntentScore);\n  queryIntentNode.setAttribute(\"query\", userQuery);\n  p3Node.appendChild(queryIntentNode);\n  doc.documentElement.appendChild(p3Node);\n\n  var xmlBytes = new java.lang.String(docToString(doc)).getBytes(\"UTF-8\");\n  var stream = new java.io.ByteArrayInputStream(xmlBytes);\n  var raw = new com.lucidworks.apollo.solr.response.RawResponse(stream, \"application/xml\", \"UTF-8\");\n  var newResponse = new com.lucidworks.apollo.pipeline.query.Response(null, raw);\n  var queryRequestAndResponse = com.lucidworks.apollo.pipeline.query.QueryRequestAndResponse.create(request, newResponse, 1);\n  return queryRequestAndResponse;\n}\n\nfunction docToString(doc) {\n  var transformerFactory = javax.xml.transform.TransformerFactory.newInstance();\n  var transformer = transformerFactory.newTransformer();\n  var writer = new java.io.StringWriter();\n  transformer.transform(new javax.xml.transform.dom.DOMSource(doc), new javax.xml.transform.stream.StreamResult(writer));\n  return writer.toString();\n}\n\nfunction getXMLDocument(innerResponse) {\n  var ddoc = null;\n  try {\n    var dbFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();\n    var dBuilder = dbFactory.newDocumentBuilder();\n    var inputSource = new org.xml.sax.InputSource(new java.io.StringReader(innerResponse));\n    ddoc = dBuilder.parse(inputSource);\n    ddoc.getDocumentElement().normalize();\n  } catch (e) {\n    logger.error(e.toString());\n  }\n  return ddoc;\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": false,
      "label": "[Phase 3] Add query intent to response"
    },
    {
      
      "script": "function (request, response, ctx) {\n  var end = new Date() - ctx.get(\"startTime2\");\n  logger.info(\"MLMSF 2: \" + end)\n}",
      "shareState": true,
      "type": "javascript-query",
      "skip": true,
      "label": "[TEST] Final time add node"
    }
  ],
  "properties": {
    "supportedMode": "all",
    "secretSourcePipelineId": "active_override"
  }
}